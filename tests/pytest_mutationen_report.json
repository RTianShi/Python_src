{"created": 1758031948.2688189, "duration": 0.03755688667297363, "exitcode": 1, "root": "/home/rts/\u4e0b\u8f7d/Python_src", "environment": {}, "summary": {"failed": 10, "total": 10, "collected": 10}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/test_add_values.py", "type": "Module"}]}, {"nodeid": "tests/test_add_values.py", "outcome": "passed", "result": [{"nodeid": "tests/test_add_values.py::test_add_values[originalInput0]", "type": "Function", "lineno": 100}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput1]", "type": "Function", "lineno": 100}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput2]", "type": "Function", "lineno": 100}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput3]", "type": "Function", "lineno": 100}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput4]", "type": "Function", "lineno": 100}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput5]", "type": "Function", "lineno": 100}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput6]", "type": "Function", "lineno": 100}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput7]", "type": "Function", "lineno": 100}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput8]", "type": "Function", "lineno": 100}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput9]", "type": "Function", "lineno": 100}]}], "tests": [{"nodeid": "tests/test_add_values.py::test_add_values[originalInput0]", "lineno": 100, "outcome": "failed", "keywords": ["test_add_values[originalInput0]", "parametrize", "pytestmark", "originalInput0", "test_add_values.py", "tests", "Python_src", ""], "setup": {"duration": 0.0004625209840014577, "outcome": "passed"}, "call": {"duration": 0.011125568009447306, "outcome": "failed", "crash": {"path": "tests/test_add_values.py::test_add_values[originalInput0]", "lineno": 0, "message": "check 15 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\n"}, "longrepr": "FAILURE: check 15 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\nFAILURE: check 1 == 0: MR3_2 failed\n------------------------------------------------------------\nFailed Checks: 2"}, "teardown": {"duration": 0.00013047998072579503, "outcome": "passed"}}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput1]", "lineno": 100, "outcome": "failed", "keywords": ["test_add_values[originalInput1]", "parametrize", "pytestmark", "originalInput1", "test_add_values.py", "tests", "Python_src", ""], "setup": {"duration": 0.00013346801279112697, "outcome": "passed"}, "call": {"duration": 0.0006734660128131509, "outcome": "failed", "crash": {"path": "tests/test_add_values.py::test_add_values[originalInput1]", "lineno": 0, "message": "check 15 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\n"}, "longrepr": "FAILURE: check 15 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\nFAILURE: check 1 == 0: MR3_2 failed\n------------------------------------------------------------\nFailed Checks: 2"}, "teardown": {"duration": 0.00010195298818871379, "outcome": "passed"}}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput2]", "lineno": 100, "outcome": "failed", "keywords": ["test_add_values[originalInput2]", "parametrize", "pytestmark", "originalInput2", "test_add_values.py", "tests", "Python_src", ""], "setup": {"duration": 0.00012766901636496186, "outcome": "passed"}, "call": {"duration": 0.0006956340512260795, "outcome": "failed", "crash": {"path": "tests/test_add_values.py::test_add_values[originalInput2]", "lineno": 0, "message": "check 15 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\n"}, "longrepr": "FAILURE: check 15 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\nFAILURE: check 1 == 0: MR3_2 failed\n------------------------------------------------------------\nFailed Checks: 2"}, "teardown": {"duration": 9.841599967330694e-05, "outcome": "passed"}}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput3]", "lineno": 100, "outcome": "failed", "keywords": ["test_add_values[originalInput3]", "parametrize", "pytestmark", "originalInput3", "test_add_values.py", "tests", "Python_src", ""], "setup": {"duration": 0.00013837998267263174, "outcome": "passed"}, "call": {"duration": 0.0008328979602083564, "outcome": "failed", "crash": {"path": "tests/test_add_values.py::test_add_values[originalInput3]", "lineno": 0, "message": "check 18 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\n"}, "longrepr": "FAILURE: check 18 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\nFAILURE: check 1 == 0: MR3_2 failed\n------------------------------------------------------------\nFailed Checks: 2"}, "teardown": {"duration": 0.00015277497004717588, "outcome": "passed"}}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput4]", "lineno": 100, "outcome": "failed", "keywords": ["test_add_values[originalInput4]", "parametrize", "pytestmark", "originalInput4", "test_add_values.py", "tests", "Python_src", ""], "setup": {"duration": 0.0001883559743873775, "outcome": "passed"}, "call": {"duration": 0.0006640880019403994, "outcome": "failed", "crash": {"path": "tests/test_add_values.py::test_add_values[originalInput4]", "lineno": 0, "message": "check 15 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\n"}, "longrepr": "FAILURE: check 15 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\nFAILURE: check 1 == 0: MR3_2 failed\n------------------------------------------------------------\nFailed Checks: 2"}, "teardown": {"duration": 0.00010946503607556224, "outcome": "passed"}}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput5]", "lineno": 100, "outcome": "failed", "keywords": ["test_add_values[originalInput5]", "parametrize", "pytestmark", "originalInput5", "test_add_values.py", "tests", "Python_src", ""], "setup": {"duration": 0.00012928503565490246, "outcome": "passed"}, "call": {"duration": 0.0005742329522036016, "outcome": "failed", "crash": {"path": "tests/test_add_values.py::test_add_values[originalInput5]", "lineno": 0, "message": "check 18 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\n"}, "longrepr": "FAILURE: check 18 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\nFAILURE: check 1 == 0: MR3_2 failed\n------------------------------------------------------------\nFailed Checks: 2"}, "teardown": {"duration": 9.650702122598886e-05, "outcome": "passed"}}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput6]", "lineno": 100, "outcome": "failed", "keywords": ["test_add_values[originalInput6]", "parametrize", "pytestmark", "originalInput6", "test_add_values.py", "tests", "Python_src", ""], "setup": {"duration": 0.00012093700934201479, "outcome": "passed"}, "call": {"duration": 0.0005390750011429191, "outcome": "failed", "crash": {"path": "tests/test_add_values.py::test_add_values[originalInput6]", "lineno": 0, "message": "check 18 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\n"}, "longrepr": "FAILURE: check 18 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\nFAILURE: check 1 == 0: MR3_2 failed\n------------------------------------------------------------\nFailed Checks: 2"}, "teardown": {"duration": 0.00010256899986416101, "outcome": "passed"}}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput7]", "lineno": 100, "outcome": "failed", "keywords": ["test_add_values[originalInput7]", "parametrize", "pytestmark", "originalInput7", "test_add_values.py", "tests", "Python_src", ""], "setup": {"duration": 0.00012209505075588822, "outcome": "passed"}, "call": {"duration": 0.0005378210335038602, "outcome": "failed", "crash": {"path": "tests/test_add_values.py::test_add_values[originalInput7]", "lineno": 0, "message": "check 18 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\n"}, "longrepr": "FAILURE: check 18 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\nFAILURE: check 1 == 0: MR3_2 failed\n------------------------------------------------------------\nFailed Checks: 2"}, "teardown": {"duration": 9.828596375882626e-05, "outcome": "passed"}}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput8]", "lineno": 100, "outcome": "failed", "keywords": ["test_add_values[originalInput8]", "parametrize", "pytestmark", "originalInput8", "test_add_values.py", "tests", "Python_src", ""], "setup": {"duration": 0.00011710502440109849, "outcome": "passed"}, "call": {"duration": 0.0005355080356821418, "outcome": "failed", "crash": {"path": "tests/test_add_values.py::test_add_values[originalInput8]", "lineno": 0, "message": "check 18 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\n"}, "longrepr": "FAILURE: check 18 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\nFAILURE: check 1 == 0: MR3_2 failed\n------------------------------------------------------------\nFailed Checks: 2"}, "teardown": {"duration": 9.96069866232574e-05, "outcome": "passed"}}, {"nodeid": "tests/test_add_values.py::test_add_values[originalInput9]", "lineno": 100, "outcome": "failed", "keywords": ["test_add_values[originalInput9]", "parametrize", "pytestmark", "originalInput9", "test_add_values.py", "tests", "Python_src", ""], "setup": {"duration": 0.00011759501649066806, "outcome": "passed"}, "call": {"duration": 0.000534206978045404, "outcome": "failed", "crash": {"path": "tests/test_add_values.py::test_add_values[originalInput9]", "lineno": 0, "message": "check 15 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\n"}, "longrepr": "FAILURE: check 15 == 0: MR2 failed\ntest_add_values.py:115 in test_add_values() -> applyMR_Assert(originalInput, originalResult)\ntest_add_values.py:84 in applyMR_Assert() -> check.equal(originalResult + len(originalInput) * 3, transformResult2, \"MR2 failed\")\n\nFAILURE: check 1 == 0: MR3_2 failed\n------------------------------------------------------------\nFailed Checks: 2"}, "teardown": {"duration": 0.0001603240380063653, "outcome": "passed"}}], "warnings": [{"message": "Unknown config option: pytest -vv --tb\n", "category": "PytestConfigWarning", "when": "config", "filename": "/home/rts/anaconda3/envs/mutmut39/lib/python3.9/site-packages/_pytest/config/__init__.py", "lineno": 1474}]}