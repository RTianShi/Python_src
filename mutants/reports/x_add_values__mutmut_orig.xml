<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="1" time="0.023" timestamp="2025-09-18T16:07:56.022568+08:00" hostname="rts-B530E-WXXXX"><testcase classname="tests.test_add_values" name="test_add_values[originalInput0]" time="0.000"><failure message="ZeroDivisionError: integer division or modulo by zero">originalInput = [1, 3, 2, 6, 9]

    @pytest.mark.parametrize("originalInput", [
        [1, 3, 2, 6, 9],
        [2, 1, 4, 4, 2],
        [4, -2, 4, 6, 2],
        [9, 2, 1, 5, 3, 2],
        [-1, 9, 1, -3, -3],
        [8, 3, 2, 6, 2, 3],
        [1, 2, 3, 4, -5, 6],
        [1, 2, 4, 2, 7, 5],
        [1, 1, 2, 4, 1, 2],
        [-2, 3, 1, 4, 7],
    ])
    def test_add_values(originalInput):
        originalResult = add_values(originalInput)
&gt;       applyMR_Assert(originalInput, originalResult)

../tests/test_add_values.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../tests/test_add_values.py:14: in applyMR_Assert
    transformResult3_1 = add_values(transformInput3_1)
src/add_values.py:67: in add_values
    result = _mutmut_trampoline(x_add_values__mutmut_orig, x_add_values__mutmut_mutants, args, kwargs)
src/add_values.py:24: in _mutmut_trampoline
    result = orig(*call_args, **call_kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

data = [1, 3, 2, 6, 9, 0]

    def x_add_values__mutmut_orig(data):
        sum = 0
        for i in data:
&gt;           sum %= i
E           ZeroDivisionError: integer division or modulo by zero

src/add_values.py:36: ZeroDivisionError</failure></testcase></testsuite></testsuites>